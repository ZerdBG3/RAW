function RAW_HasHigherPriorityExtraAttackQueued(status, entity)
    local entity = entity or context.Target
    local eaQueuedStatuses = {'EXTRA_ATTACK_2_Q'
        , 'WILDSTRIKE_2_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_Q'
        , 'WILDSTRIKE_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_THIRSTING_BLADE_Q'
        , 'MAG_MARTIAL_EXERTION_Q'
        , 'STALKERS_FLURRY_Q'
        , 'EXTRA_ATTACK_WAR_MAGIC_Q'
        , 'EXTRA_ATTACK_WAR_PRIEST_Q'
        , 'COMMANDERS_STRIKE_Q_D10'
        , 'COMMANDERS_STRIKE_Q_D8'
    }
    for i,v in ipairs(eaQueuedStatuses) do
        if (v == status) then
            return ConditionResult(false)
        end
        if HasStatus(v, entity, context.Source, false).Result then
            return ConditionResult(true)
        end
    end

    return ConditionResult(false)
end

function RAW_ExtraAttackCheck()
    return ((HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone')) & ~(HasStringInSpellRoll('RangedWeaponAttack') & HasStatus('RAW_EXTRA_ATTACK_LOADING', context.Source))) & HasUseCosts('ActionPoint')
end

function RAW_LoadingBlockExtraAttack(entity)
    local entity = entity or context.Source
    return HasStringInSpellRoll('RangedWeaponAttack') & WieldingWeapon('Loading', false, false, entity) & ~(HasPassive('CrossbowExpert_Wounding', entity) & IsProficientWith(entity, GetAttackWeapon(entity)))
end

function RAW_HasteCheck()
    return (HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone') | SpellId('Shout_Dash') | SpellId('Shout_Disengage') | SpellId('Shout_Hide')) & HasUseCosts('ActionPoint')
end

function RAW_IsThrowAttackRoll()
    local res = IsMeleeWeaponAttack() & SpellTypeIs(SpellType.Throw) & HasWeaponProperty(WeaponProperties.Finesse, context.HitDescription.ThrownObject)
    return ConditionResult(res.Result)
end
