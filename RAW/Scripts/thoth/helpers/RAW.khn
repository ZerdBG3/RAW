function RAW_HasHigherPriorityExtraAttackQueued(status, entity)
    local entity = entity or context.Target
    local eaQueuedStatuses = {'EXTRA_ATTACK_2_Q'
        , 'WILDSTRIKE_2_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_Q'
        , 'WILDSTRIKE_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_THIRSTING_BLADE_Q'
        , 'MAG_MARTIAL_EXERTION_Q'
        , 'STALKERS_FLURRY_Q'
        , 'EXTRA_ATTACK_WAR_MAGIC_Q'
        , 'EXTRA_ATTACK_WAR_PRIEST_Q'
    }
    for i,v in ipairs(eaQueuedStatuses) do
        if (v == status) then
            return ConditionResult(false)
        end
        if HasStatus(v, entity, context.Source, false).Result then
            return ConditionResult(true)
        end
    end

    return ConditionResult(false)
end

function RAW_ExtraAttackCheck()
    return ((HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone')) & ~(HasStringInSpellRoll('RangedWeaponAttack') & HasStatus('RAW_EXTRA_ATTACK_LOADING', context.Source))) & HasUseCosts('ActionPoint')
end

function RAW_ExtraAttackSpellCheck()
    return HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Target_Bufotoxin_Frog_Summon') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone')
end

function RAW_LoadingBlockExtraAttack(entity)
    local entity = entity or context.Source
    return HasStringInSpellRoll('RangedWeaponAttack') & WieldingWeapon('Loading', false, false, entity) & ~(HasPassive('CrossbowExpert_Wounding', entity) & IsProficientWith(entity, GetAttackWeapon(entity)))
end

function RAW_HasteCheck()
    return (HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone') | SpellId('Shout_Dash') | SpellId('Shout_Disengage') | SpellId('Shout_Hide')) & HasUseCosts('ActionPoint')
end

function RAW_BonusActionSpellCheck()
    return IsSpell() & ~IsCantrip() & HasUseCosts('BonusActionPoint')
end

function RAW_NotBonusActionSpellCheck()
    return IsSpell() & ~IsCantrip() & ~HasUseCosts('BonusActionPoint')
end

function RAW_IsMeleeMainHandWeaponAttack()
    result = context.HitDescription.AttackType == AttackType.MeleeWeaponAttack
    return ConditionResult(result)
end

function RAW_IsRangedMainHandWeaponAttack()
    result = context.HitDescription.AttackType == AttackType.RangedWeaponAttack
    return ConditionResult(result)
end

function RAW_FightingStyle_TwoWeapons_Ranged(entity)
	-- Default to Target, like cpp functions
    entity = entity or context.Target
    return WieldingWeapon('Ammunition', false, false, entity) & ~WieldingWeapon('Twohanded', false, false, entity) & WieldingWeapon('Ammunition', true, false, entity)
end

function RAW_AttunementCombatRestriction(entity)
    local entity = entity or context.Source
    result = (Player(entity) & ~Combat(entity)) | ~Player(entity)
    return ConditionResult(result.Result, {ConditionError("RAW_AttunementCombat_False")})
end

function RAW_AttunementMaximumRestriction(entity, status, artificerStatus)
    local entity = entity or context.Source
    result = (~HasStatus(status, entity) & ~ClassLevelHigherOrEqualThan(10, 'Artificer', entity)) |
        (~HasStatus(artificerStatus, entity) & ClassLevelHigherOrEqualThan(10, 'Artificer', entity)) |
        ~Player(entity)

    return ConditionResult(result.Result, {ConditionError("RAW_AttunementMaxItems_False")})
end

function RAW_ConcentrationBlocker()
    result = ~HasStatus('RAW_CONCENTRATION_BLOCKER')
    return ConditionResult(result.Result, {ConditionError("RAW_ConcentrationBlocker_False")})
end
