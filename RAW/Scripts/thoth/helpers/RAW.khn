function RAW_HasHigherPriorityExtraAttackQueued(status, entity)
    local entity = entity or context.Target
    local eaQueuedStatuses = {'EXTRA_ATTACK_2_Q'
        , 'WILDSTRIKE_2_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_Q'
        , 'WILDSTRIKE_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_THIRSTING_BLADE_Q'
        , 'MAG_MARTIAL_EXERTION_Q'
        , 'STALKERS_FLURRY_Q'
        , 'EXTRA_ATTACK_WAR_MAGIC_Q'
        , 'EXTRA_ATTACK_WAR_PRIEST_Q'
    }
    for i,v in ipairs(eaQueuedStatuses) do
        if (v == status) then
            return ConditionResult(false)
        end
        if HasStatus(v, entity, context.Source, false).Result then
            return ConditionResult(true)
        end
    end
    return ConditionResult(false)
end

function RAW_ExtraAttackCheck()
    return ((RAW_ExtraAttackSpellCheck()) & ~(HasStringInSpellRoll('RangedWeaponAttack') & HasStatus('RAW_EXTRA_ATTACK_LOADING', context.Source))) & HasUseCosts('ActionPoint')
end

function RAW_ExtraAttackSpellCheck()
    return HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Target_Bufotoxin_Frog_Summon') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone')
end

function RAW_LoadingBlockExtraAttack(entity)
    local entity = entity or context.Source
    return HasStringInSpellRoll('RangedWeaponAttack') & WieldingWeapon('Loading', false, false, entity) & ~(HasPassive('CrossbowExpert_Wounding', entity) & IsProficientWith(entity, GetAttackWeapon(entity)))
end

function RAW_HasteCheck()
    return (HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Projectile_ArrowOfSmokepowder') | SpellId('Target_Shove') | SpellId('RAW_Target_Shove_Player') | SpellId('RAW_Target_Shove_Player_Push') | SpellId('RAW_Target_Shove_Player_Prone') | SpellId('Shout_Dash') | SpellId('Shout_Disengage') | SpellId('Shout_Hide')) & HasUseCosts('ActionPoint')
end

function RAW_IsThrowAttackRoll()
    local res = IsMeleeWeaponAttack() & SpellTypeIs(SpellType.Throw) & HasWeaponProperty(WeaponProperties.Finesse, context.HitDescription.ThrownObject)
    return ConditionResult(res.Result)
end

function RAW_CunningActionThiefCheck()
    return SpellId('Target_Distract') & HasUseCosts('ActionPoint')
end

function RAW_BonusActionSpellCheck()
    return IsSpell() & ~IsCantrip() & HasUseCosts('BonusActionPoint')
end

function RAW_NotBonusActionSpellCheck()
    return IsSpell() & ~IsCantrip() & ~HasUseCosts('BonusActionPoint')
end

function RAW_IsMeleeMainHandWeaponAttack()
    result = context.HitDescription.AttackType == AttackType.MeleeWeaponAttack
    return ConditionResult(result)
end

function RAW_IsRangedMainHandWeaponAttack()
    result = context.HitDescription.AttackType == AttackType.RangedWeaponAttack
    return ConditionResult(result)
end

function RAW_FightingStyle_TwoWeapons_Ranged(entity)
	-- Default to Target, like cpp functions
    entity = entity or context.Target
    return WieldingWeapon('Ammunition', false, false, entity) & ~WieldingWeapon('Twohanded', false, false, entity) & WieldingWeapon('Ammunition', true, false, entity)
end

function RAW_IsAbilityCheck(entity)
    local entity = entity or context.Source
    local isStr = context.CheckedAbility == Ability.Strength
    local isDex = context.CheckedAbility == Ability.Dexterity
    local isCon = context.CheckedAbility == Ability.Constitution
    local isInt = context.CheckedAbility == Ability.Intelligence
    local isWis = context.CheckedAbility == Ability.Wisdom
    local isCha = context.CheckedAbility == Ability.Charisma
    return ConditionResult(isStr or isDex or isCon or isInt or isWis or isCha)
end

function RAW_IsSkillCheck(entity)
    local entity = entity or context.Source
    local isAthletics = context.CheckedSkill == Skill.Athletics
    local isAcrobatics = context.CheckedSkill == Skill.Acrobatics
    local isSleightOfHand = context.CheckedSkill == Skill.SleightOfHand
    local isStealth = context.CheckedSkill == Skill.Stealth
    local isArcana = context.CheckedSkill == Skill.Arcana
    local isHistory = context.CheckedSkill == Skill.History
    local isInvestigation = context.CheckedSkill == Skill.Investigation
    local isNature = context.CheckedSkill == Skill.Nature
    local isReligion = context.CheckedSkill == Skill.Religion
    local isAnimalHandling = context.CheckedSkill == Skill.AnimalHandling
    local isInsight = context.CheckedSkill == Skill.Insight
    local isMedicine = context.CheckedSkill == Skill.Medicine
    local isPerception = context.CheckedSkill == Skill.Perception
    local isSurvival = context.CheckedSkill == Skill.Survival
    local isDeception = context.CheckedSkill == Skill.Deception
    local isIntimidation = context.CheckedSkill == Skill.Intimidation
    local isPerformance = context.CheckedSkill == Skill.Performance
    local isPersuasion = context.CheckedSkill == Skill.Persuasion
    return ConditionResult(isAthletics or isAcrobatics or isSleightOfHand or isStealth or isArcana or isHistory or isInvestigation or
        isNature or isReligion or isAnimalHandling or isInsight or isMedicine or isPerception or isSurvival or isDeception or
        isIntimidation or isPerformance or isPersuasion)
end

function RAW_AttunementCombatRestriction(entity)
    local entity = entity or context.Source
    result = (Player(entity) & ~Combat(entity)) | ~Player(entity)
    return ConditionResult(result.Result, {ConditionError("RAW_AttunementCombat_False")})
end

function RAW_AttunementMaximumRestriction(entity, status, artificerStatus)
    local entity = entity or context.Source
    result = (~HasStatus(status, entity) & ~ClassLevelHigherOrEqualThan(10, 'Artificer', entity)) |
        (~HasStatus(artificerStatus, entity) & ClassLevelHigherOrEqualThan(10, 'Artificer', entity)) |
        ~Player(entity)

    return ConditionResult(result.Result, {ConditionError("RAW_AttunementMaxItems_False")})
end

function RAW_ConcentrationBlocker()
    result = ~HasStatus('RAW_CONCENTRATION_BLOCKER')
    return ConditionResult(result.Result, {ConditionError("RAW_ConcentrationBlocker_False")})
end

function IsInvisibleSneaking(entity)
    local entity = entity or context.Target
    return HasStatus('INVISIBLE_SNEAKING',entity) 
        |  HasStatus('INVISIBLE_MAGEHAND_SNEAKING',entity) 
        |  HasStatus('INVISIBILITY_SNEAKING',entity) 
        |  HasStatus('ONE_WITH_SHADOWS_SNEAKING',entity) 
        |  HasStatus('POTION_OF_INVISIBILITY_SNEAKING',entity) 
        |  HasStatus('CLOAK_OF_SHADOWS_SNEAKING',entity) 
        |  HasStatus('CLOAK_OF_SHADOWS_MONK_SNEAKING',entity) 
        |  HasStatus('UMBRAL_CLOAK_SNEAKING',entity) 
        |  HasStatus('GREATER_INVISIBILITY_SNEAKING',entity) 
        |  HasStatus('SHADOWBLEND_SNEAKING',entity) 
        |  HasStatus('INVISIBILITY_SHADARKAI_GLOOMWEAVER_SNEAKING',entity) 
        |  HasStatus('HIDE_IN_PLAIN_SIGHT_SNEAKING',entity) 
        |  HasStatus('MISTY_ESCAPE_INVISIBLE_SNEAKING',entity) 
        |  HasStatus('INVISIBILITY_PANTHER_SNEAKING',entity) 
        |  HasStatus('SHROUD_SELF_SNEAKING',entity) 
        |  HasStatus('SUPREME_SNEAK_SNEAKING',entity) 
        |  HasStatus('LOW_POLTERGEIST_INVISIBLE_SNEAKING',entity) 
        |  HasStatus('SHADOW_WALKER_SNEAKING',entity)
end

function RAW_CanSeeInvisible(entity)
    local entity = entity or context.Source
    return Tagged('BLINDSIGHT', entity) 
        |  HasStatus('TRUESIGHT', entity) & ~DistanceToGreaterThan(context.SourcePosition, context.TargetPosition, 36.5)
        | (HasStatus('SEE_INVISIBILITY', entity) | HasStatus('MAG_SEE_INVISIBILITY_HIDDEN_IGNORE_RESTING', entity)) & ~DistanceToGreaterThan(context.SourcePosition, context.TargetPosition, 9)
        | (HasStatus('SEE_INVISIBILITY_SEEK', entity) | HasPassive('FightingStyle_BlindFighting', entity)) & ~DistanceToGreaterThan(context.SourcePosition, context.TargetPosition, 3)
end
